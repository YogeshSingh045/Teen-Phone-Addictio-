# -*- coding: utf-8 -*-
"""Phone Addiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OsnJmvpPMnhIXjLK_8MR_RpEzUB8eN1q

### **Objective of this analysis is to pridict Phone Addiction level among the teens.**

###Data Cleaning
"""

#import libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math

# load data as df and pull top rows

df = pd.read_csv("/content/teen_phone_addiction_dataset.csv")
df.head()

# to see all columns of the data set
df.columns

# to see the how many columns and rows does this dataset have

df.shape

# to see the all informations of all the columns
df.info()

# just to double check for the null value

df.isnull().sum()

# we don't have any null value in this dataset
# let's see what type of numerical value this dataset have

df.describe()

# we can see we don't need id column so we drop this column

df.drop(columns=['ID'] , inplace=True)

df['Gender'].value_counts()

# Bucket addiction into 3 classes
df['Addiction_Class'] = pd.cut(df['Addiction_Level'],
                                bins=[0, 4, 7, 10],
                                labels=['Low', 'Medium', 'High'])

"""###Visualization"""

# there is not much to clean and change so we move forward to plotting

num_df = df.select_dtypes(include=['int' , 'float'])

plt.figure(figsize=(10,6))
sns.heatmap(num_df.corr() , annot=True , cmap='coolwarm' , fmt='.2f')
plt.show()

# there is so much data to find relation between them that's we gone do one by one

corr_1 = num_df[['Daily_Usage_Hours' , 'Sleep_Hours' , 'Screen_Time_Before_Bed' , 'Addiction_Level']]

plt.figure(figsize=(10,6))
sns.heatmap(corr_1.corr() , annot=True , cmap= 'coolwarm' , fmt='.2f' , linewidth=1)
plt.title('Correlation Heat Map - 1')
plt.show()

corr_2 = num_df[['Academic_Performance' , 'Social_Interactions' , 'Exercise_Hours' , 'Anxiety_Level' , 'Depression_Level' , 'Self_Esteem' , 'Parental_Control','Addiction_Level']]

plt.figure(figsize=(10,6))
sns.heatmap(corr_2.corr() , annot=True , cmap= 'coolwarm' , fmt='.2f' , linewidth=1)
plt.title('Correlation Heat Map - 2')
plt.show()

sns.histplot(df['Addiction_Level'], bins=10, kde=True)
plt.title("Distribution of Phone Addiction Levels")
plt.show()

addiction_age = df.groupby('Age')['Addiction_Level'].sum()

addiction_age = pd.DataFrame(addiction_age)

ax = sns.barplot(x='Age' , y='Addiction_Level' , data=addiction_age , palette='viridis')
plt.xlabel('Age')
plt.ylabel('Addiction Level')
plt.title('Addiction Level by Age')

for container in ax.containers:
  ax.bar_label(container , fmt='%.2f')

plt.show()

addiction_gender = df.groupby('Gender')['Addiction_Level'].mean()

addiction_gender = pd.DataFrame(addiction_gender)

plt.figure(figsize=(5,5))
ay = sns.barplot(x='Gender' , y='Addiction_Level' , data=addiction_gender , palette='viridis')
plt.xlabel('Gender')
plt.ylabel('Addiction Level')
plt.title('Addiction Level by Gender')

for container in ay.containers:
  ay.bar_label(container , fmt='%.2f')

plt.show()

plt.figure(figsize=(5,5))

plt.scatter(x=df['Addiction_Level'] , y=df['Daily_Usage_Hours'])
plt.xlabel('Daily_Usage_Hours')
plt.ylabel('Addiction_Level')
plt.title('Daily_Usage_Hours vs Addiction_Level')
plt.show()

df.hist(bins=5  , figsize=(20,20))
plt.show()

key_features = ['Addiction_Level', 'Daily_Usage_Hours', 'Sleep_Hours', 'Phone_Checks_Per_Day', 'Time_on_Social_Media']
sns.pairplot(df[key_features])
plt.show()

sns.lineplot(x='Sleep_Hours' , y='Addiction_Level' , data=df , palette='viridis')
plt.xlabel("Sleep Hours")
plt.ylabel("Addiction Level")
plt.title("Addiction Level Across Sleep Hours")
plt.show()

ax = sns.countplot(x='Phone_Usage_Purpose', data=df , palette='viridis')
plt.xlabel("Phone Usage Purpose")
plt.ylabel("Count")
plt.title("Common Phone Usage Purposes")
plt.xticks(rotation=10)

for container in ax.containers:
  ax.bar_label(container , fmt='%.2f')
plt.show()

sns.lineplot(x='Age', y='Addiction_Level', data=df , color='red')
plt.xlabel("Age")
plt.ylabel("Addiction Level")
plt.title("Addiction Level Across Age")
plt.show()

parent_df = df[['Family_Communication' , 'Parental_Control' , 'Depression_Level' , 'Addiction_Level']]

sns.pairplot(parent_df)
plt.show()

"""###Linear Model"""

import sklearn
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn import metrics
from sklearn.metrics import accuracy_score

X = df.drop(columns=['Addiction_Level' , 'Name' ,'Location' ,'School_Grade' , 'Academic_Performance' , 'Exercise_Hours' ,'Self_Esteem' ,'Parental_Control' ,'Time_on_Education'
  , 'Family_Communication' , 'Weekend_Usage_Hours' , 'Addiction_Class'])
y = df['Addiction_Level'].reset_index(drop=True)

y = pd.DataFrame(y)

X['Gender'] = LabelEncoder().fit_transform(X['Gender'])
X['Phone_Usage_Purpose'] = LabelEncoder().fit_transform(X['Phone_Usage_Purpose'])

y = LabelEncoder().fit_transform(y)

X.head()

X_train , X_test , y_train , y_test = train_test_split(X , y , test_size=0.2 , random_state=42)

lr = LinearRegression()
lr.fit(X_train , y_train)
lr_pred = lr.predict(X_test)
acc = lr.score(X_test , y_test)
print(f"Accuracy: {acc:.2f}")

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

mse = mean_squared_error(y_test, lr_pred)
mae = mean_absolute_error(y_test, lr_pred)
r2 = r2_score(y_test, lr_pred)

print(f"MSE: {mse:.2f}, MAE: {mae:.2f}, R2: {r2:.2f}")

plt.scatter(y_test, lr_pred)
plt.xlabel("Actual Addiction Level")
plt.ylabel("Predicted Addiction Level")
plt.title("Actual vs Predicted Addiction Level")
plt.grid(True)
plt.show()

"""###Classification Model"""

# Then train a classifier
from sklearn.ensemble import RandomForestClassifier

X1 =  X
y1 = df['Addiction_Class'].reset_index(drop=True)

X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.3)
clf = RandomForestClassifier()
clf.fit(X1_train, y1_train)
y_pred = clf.predict(X1_test)

acc = accuracy_score(y1_test, y_pred)
print(f"Classification Accuracy: {acc:.2f}")

from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(y1_test, y_pred))
print(classification_report(y1_test, y_pred))

"""### Key Insights
- Teens with higher daily usage tend to show higher addiction levels.
- Lower sleep hours are negatively correlated with addiction level.
- Social media and entertainment are the most common phone usage purposes.

"""